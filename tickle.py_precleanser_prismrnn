import os
import sys
import numpy
from pydub import AudioSegment
from pydub import silence

#this is a lot slower than the first precleanser but it throws less issues when working with prism-samplernn
#this is just a script to use thier command line python tool to iterate through a directory, which is useful when you have hundreds of training examples.

#directory to sort through
input_dir = 'D:/big documents/python baby'

#code to get absolute path of all files in a directory found here: https://stackoverflow.com/questions/25657705/make-os-listdir-list-complete-paths
all_file_names = sorted(os.listdir(input_dir), key=lambda fn:os.path.getctime(os.path.join(input_dir, fn)))
#prepending absolute path to items in directory
all_file_names_abs = [f'D:/big documents/python baby/{i}' for i in all_file_names]

#iterates through all files within the chosen directory and applies the chunkaudio script if they are .wav
for each_file in all_file_names_abs:
    
    if('.wav' in each_file):
        
        input_file = each_file
        output_dir = 'D:/big documents/ticklepy/prism-samplernn/data'
        chunk_length = 8000
        overlap = 1000

        # Create output dir if it doesn't exist
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)

        # Checks for silent chunks
        def is_silent(chunk, chunk_length):
            # if at least half of chunk is silence, mark as silent
            silences = silence.detect_silence(
                chunk,
                min_silence_len=int(chunk_length/2),
                silence_thresh=-64)
            if silences:
                return True
            else:
                return False

        # Load file and set directories
        audio = AudioSegment.from_wav(input_file)
        input_filename = input_file.split('/')[-1].replace('.wav', '')

        # Get length of audio
        audio_len = len(audio)

        # Initialize start and end seconds to 0
        start = 0
        end = 0

        # Iterate from 0 to end of the file,
        # with increment = chunk_length
        cnt = 0
        num_silent = 0
        flag = 0 # Break loop once we reach the end of the audio
        for i in range(0, 8 * audio_len, chunk_length):

            # At first, start is 0, end is the chunk_length
            # Else, start=prvs end-overlap, end=start+chunk_length
            if i == 0:
                start = 0
                end = chunk_length
            else:
                start = end - overlap
                end = start + chunk_length

            # Set flag to 1 if endtime exceeds length of file
            if end >= audio_len:
                end = audio_len
                flag = 1

            # Storing audio file from the defined start to end
            chunk = audio[start:end]
            if flag == 0:
                cnt = cnt + 1
                chunk_is_silent = is_silent(chunk, chunk_length)
                if chunk_is_silent:
                    print('Chunk {} is silent, omitting it.'.format(cnt))
                    num_silent = num_silent + 1
                else:
                    filename = input_filename + f'_chunk_{cnt}.wav'
                    chunk.export(os.path.join(output_dir, filename), format="wav")
                    print("Processing chunk " + str(cnt) + ". Start = "
                            + str(start) + " end = " + str(end))

        print('\n')
        print("Finished chunking {}.".format(input_file))
        print("{} chunks processed, {} were silent.".format(cnt, num_silent))
        print("Saved {} chunks to {}.".format(cnt - num_silent, output_dir))
